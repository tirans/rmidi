name: Build and Test
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: write  # Changed from read to write to allow version increment commits
  id-token: write  # For PyPI publishing

jobs:
  increment-version:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # Ensure we can push back to the repository
          persist-credentials: true

      - name: Configure Git
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Increment version
        id: version
        run: |
          ./.github/scripts/update-version.sh "patch"

  test:
    needs: increment-version
    if: always() && (github.event_name != 'push' || github.ref != 'refs/heads/master' || success() || failure())
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        run: |
          # Mark workspace as safe directory
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          
          # Skip submodule setup since server/midi-presets is in .gitignore
          # This indicates the build is designed to work without it
          echo "ℹ️ Skipping submodule setup (not required for build)"

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxcb-util-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 \
            libxcb-shape0 portaudio19-dev build-essential \
            pkg-config libffi-dev libssl-dev libgl1-mesa-dri \
            libglib2.0-0 xvfb

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest build twine pyinstaller
          if [ -f requirements.txt ]; then 
            pip install -r requirements.txt
          fi
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
          pip install -e ".[test]"

      - name: Test with pytest
        run: |
          export PYTHONPATH=$PWD:${PYTHONPATH:-}
          xvfb-run -a python -m pytest -v --cov=server --cov=r2midi_client --cov-report=xml

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.12'
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  build-python-package:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "ℹ️ Skipping submodule setup (not required for build)"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install build twine

      - name: Build Python package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Upload Python package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  build-cross-platform:
    needs: test
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        # Windows and Linux only (macOS handled separately)
        include:
          - os: windows-latest
            platform: windows
            platform_name: windows
            emoji: 🪟
          - os: ubuntu-latest
            platform: linux
            platform_name: linux  
            emoji: 🐧
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "ℹ️ Skipping submodule setup (not required for build)"
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          echo "${{ matrix.emoji }} Installing Linux dependencies..."
          sudo apt-get update
          sudo apt-get install -y \
            libasound2-dev libegl1 libjack-dev librtmidi-dev \
            libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 \
            libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
            libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev \
            libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev \
            libxfixes-dev libxi-dev libxrender-dev libxcb1-dev \
            libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev \
            libxcb-shm0-dev libxcb-util0-dev libxcb-util-dev \
            libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 \
            libxcb-shape0

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install briefcase
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi
        shell: bash

      - name: Configure build metadata
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "${{ matrix.emoji }} Building version: $VERSION for ${{ matrix.platform }}"
        shell: bash

      - name: Update pyproject.toml
        run: |
          sed -i.bak "s|version = \"0\.1\.64\"|version = \"${APP_VERSION}\"|g" pyproject.toml
        shell: bash

      - name: Build applications
        run: |
          echo "${{ matrix.emoji }} Creating applications for ${{ matrix.platform }}..."
          if [ "${{ matrix.platform }}" = "windows" ]; then
            briefcase create ${{ matrix.platform }} app -a server
            briefcase build ${{ matrix.platform }} app -a server
            briefcase package ${{ matrix.platform }} app -a server

            briefcase create ${{ matrix.platform }} app -a r2midi-client
            briefcase build ${{ matrix.platform }} app -a r2midi-client
            briefcase package ${{ matrix.platform }} app -a r2midi-client
          else
            briefcase create ${{ matrix.platform }} system -a server
            briefcase build ${{ matrix.platform }} system -a server 
            briefcase package ${{ matrix.platform }} system -a server

            briefcase create ${{ matrix.platform }} system -a r2midi-client
            briefcase build ${{ matrix.platform }} system -a r2midi-client
            briefcase package ${{ matrix.platform }} system -a r2midi-client
          fi
        shell: bash

      - name: Prepare build artifacts
        run: |
          mkdir -p build_artifacts
          echo "${{ matrix.emoji }} Packaging ${{ matrix.platform }} builds..."

          if [ "${{ matrix.platform }}" = "linux" ]; then
            # Copy .deb packages
            find dist/ -name "*.deb" -exec cp {} build_artifacts/ \; 2>/dev/null || true
            
            # Create tar.gz files as fallback
            if [ -d "build/server/linux/system" ]; then
              tar -czf "build_artifacts/R2MIDI-Server-linux-v${APP_VERSION}.tar.gz" -C build/server/linux/system .
            fi
            if [ -d "build/r2midi-client/linux/system" ]; then
              tar -czf "build_artifacts/R2MIDI-Client-linux-v${APP_VERSION}.tar.gz" -C build/r2midi-client/linux/system .
            fi
          else
            # Windows - create zip files
            if [ -d "build/server/windows/app" ]; then
              cd build/server/windows/app && zip -r "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Server-windows-v${APP_VERSION}.zip" * && cd "$GITHUB_WORKSPACE"
            fi
            if [ -d "build/r2midi-client/windows/app" ]; then
              cd build/r2midi-client/windows/app && zip -r "$GITHUB_WORKSPACE/build_artifacts/R2MIDI-Client-windows-v${APP_VERSION}.zip" * && cd "$GITHUB_WORKSPACE"
            fi
          fi

          echo "${{ matrix.emoji }} Build artifacts:"
          ls -la build_artifacts/
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-builds
          path: build_artifacts/
          retention-days: 30

  build-macos-packages:
    name: Build macOS Signed Packages
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'push'
    timeout-minutes: 60

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup workspace
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          echo "ℹ️ Skipping submodule setup (not required for build)"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Get application version
        id: version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV
          echo "🍎 Building macOS packages for version: $VERSION"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi

      - name: Setup certificates and keychain
        env:
          APPLE_DEVELOPER_ID_APPLICATION_CERT: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}
          APPLE_DEVELOPER_ID_INSTALLER_CERT: ${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
        run: |
          echo "🔐 Setting up certificates..."
          
          TEMP_KEYCHAIN="build.keychain"
          TEMP_KEYCHAIN_PASSWORD="temp_password_$(date +%s)"
          
          security create-keychain -p "$TEMP_KEYCHAIN_PASSWORD" "$TEMP_KEYCHAIN"
          security set-keychain-settings -lut 21600 "$TEMP_KEYCHAIN"
          security unlock-keychain -p "$TEMP_KEYCHAIN_PASSWORD" "$TEMP_KEYCHAIN"
          security list-keychains -d user -s "$TEMP_KEYCHAIN" $(security list-keychains -d user | sed s/\"//g)
          
          echo "$APPLE_DEVELOPER_ID_APPLICATION_CERT" | base64 --decode > app_cert.p12
          echo "$APPLE_DEVELOPER_ID_INSTALLER_CERT" | base64 --decode > installer_cert.p12
          
          security import app_cert.p12 -k "$TEMP_KEYCHAIN" -P "$APPLE_CERT_PASSWORD" -T /usr/bin/codesign
          security import installer_cert.p12 -k "$TEMP_KEYCHAIN" -P "$APPLE_CERT_PASSWORD" -T /usr/bin/productsign
          
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$TEMP_KEYCHAIN_PASSWORD" "$TEMP_KEYCHAIN"
          
          rm -f app_cert.p12 installer_cert.p12
          echo "✅ Certificates imported"

      - name: Build applications with PyInstaller
        run: |
          echo "🔨 Building applications..."
          mkdir -p build/server build/client
          
          # Build server
          python -m PyInstaller \
            --name "R2MIDI Server" \
            --windowed \
            --onedir \
            --clean \
            --distpath build/server \
            --workpath build/server/work \
            --specpath build/server \
            --add-data "server:server" \
            --hidden-import "uvicorn" \
            --hidden-import "fastapi" \
            --hidden-import "pydantic" \
            --osx-bundle-identifier "com.r2midi.server" \
            server/main.py
          
          # Build client
          python -m PyInstaller \
            --name "R2MIDI Client" \
            --windowed \
            --onedir \
            --clean \
            --distpath build/client \
            --workpath build/client/work \
            --specpath build/client \
            --add-data "r2midi_client:r2midi_client" \
            --hidden-import "PyQt6" \
            --hidden-import "httpx" \
            --osx-bundle-identifier "com.r2midi.client" \
            r2midi_client/main.py

      - name: Sign applications
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          echo "✍️ Signing applications..."
          
          sign_app() {
            local app_path="$1"
            echo "Signing: $app_path"
            
            find "$app_path" -type f \( -perm +111 -o -name "*.dylib" -o -name "*.so" \) -exec codesign \
              --force --verify --verbose \
              --sign "Developer ID Application: $APPLE_DEVELOPER_ID" \
              --options runtime --timestamp {} \;
            
            codesign --force --verify --verbose \
              --sign "Developer ID Application: $APPLE_DEVELOPER_ID" \
              --options runtime --timestamp "$app_path"
          }
          
          if [ -d "build/server/R2MIDI Server" ]; then
            sign_app "build/server/R2MIDI Server"
          fi
          
          if [ -d "build/client/R2MIDI Client" ]; then
            sign_app "build/client/R2MIDI Client"
          fi

      - name: Create and sign packages
        env:
          APPLE_DEVELOPER_ID: ${{ secrets.APPLE_DEVELOPER_ID }}
        run: |
          echo "📦 Creating packages..."
          mkdir -p packages
          
          create_pkg() {
            local app_path="$1"
            local pkg_name="$2"
            local identifier="$3"
            
            if [ -d "$app_path" ]; then
              echo "Creating $pkg_name.pkg..."
              
              mkdir -p "pkg_temp/$pkg_name/Applications"
              cp -R "$app_path" "pkg_temp/$pkg_name/Applications/"
              
              pkgbuild --root "pkg_temp/$pkg_name" --identifier "$identifier" \
                --version "$APP_VERSION" --install-location "/" \
                "packages/$pkg_name-unsigned.pkg"
              
              productsign --sign "Developer ID Installer: $APPLE_DEVELOPER_ID" \
                "packages/$pkg_name-unsigned.pkg" "packages/$pkg_name-v$APP_VERSION.pkg"
              
              rm "packages/$pkg_name-unsigned.pkg"
              rm -rf "pkg_temp/$pkg_name"
            fi
          }
          
          create_pkg "build/server/R2MIDI Server" "R2MIDI-Server" "com.r2midi.server"
          create_pkg "build/client/R2MIDI Client" "R2MIDI-Client" "com.r2midi.client"

      - name: Notarize packages
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
          TEAM_ID: ${{ secrets.TEAM_ID }}
        run: |
          echo "🔔 Notarizing packages..."
          
          for pkg in packages/*.pkg; do
            if [ -f "$pkg" ]; then
              echo "Notarizing: $(basename "$pkg")"
              xcrun notarytool submit "$pkg" \
                --apple-id "$APPLE_ID" \
                --password "$APP_SPECIFIC_PASSWORD" \
                --team-id "$TEAM_ID" \
                --wait
              
              xcrun stapler staple "$pkg"
              xcrun stapler validate "$pkg"
            fi
          done

      - name: Create DMG files
        run: |
          echo "💿 Creating DMG files..."
          
          create_dmg() {
            local app_path="$1"
            local dmg_name="$2"
            
            if [ -d "$app_path" ]; then
              mkdir -p "dmg_temp/$dmg_name"
              cp -R "$app_path" "dmg_temp/$dmg_name/"
              ln -s /Applications "dmg_temp/$dmg_name/Applications"
              
              hdiutil create -volname "$dmg_name" -srcfolder "dmg_temp/$dmg_name" \
                -ov -format UDZO "packages/$dmg_name-v$APP_VERSION.dmg"
              
              rm -rf "dmg_temp/$dmg_name"
            fi
          }
          
          create_dmg "build/server/R2MIDI Server" "R2MIDI-Server"
          create_dmg "build/client/R2MIDI Client" "R2MIDI-Client"
          
          echo "✅ Package creation completed:"
          ls -la packages/

      - name: Upload macOS packages
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: packages/
          retention-days: 30

      - name: Cleanup keychain
        if: always()
        run: |
          security delete-keychain build.keychain || true

  create-release:
    needs: [build-cross-platform, build-macos-packages]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_builds

      - name: Organize artifacts for release
        run: |
          echo "📦 Organizing artifacts..."
          mkdir -p release_artifacts
          
          # Copy all platform builds
          find all_builds/ -type f -name "*.deb" -o -name "*.tar.gz" -o -name "*.zip" -o -name "*.pkg" -o -name "*.dmg" | \
            xargs -I {} cp {} release_artifacts/ 2>/dev/null || true
          
          echo "📦 Release artifacts:"
          ls -la release_artifacts/

      - name: Create staging release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}-staging
          name: "R2MIDI v${{ steps.get_version.outputs.version }} - Release"
          draft: true
          prerelease: true
          files: release_artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## 🚀 R2MIDI v${{ steps.get_version.outputs.version }} - Release

            ### 📦 Available Platforms

            - 🐧 **Linux**: Production-ready packages
              - **Install**: `R2MIDI-*-linux-v${{ steps.get_version.outputs.version }}.deb`
              - **Portable**: `R2MIDI-*-linux-v${{ steps.get_version.outputs.version }}.tar.gz`

            - 🍎 **macOS**: Signed and Notarized ✨
              - **Installer**: `R2MIDI-*-v${{ steps.get_version.outputs.version }}.pkg` (Recommended)
              - **Disk Image**: `R2MIDI-*-v${{ steps.get_version.outputs.version }}.dmg`
              - ✅ **No security warnings!**

            - 🪟 **Windows**: Unsigned (Testing)
              - **Portable**: `R2MIDI-*-windows-v${{ steps.get_version.outputs.version }}.zip`
              - ⚠️ Security warnings expected

            ### 📋 Installation

            **Linux:**
            ```bash
            sudo dpkg -i R2MIDI-*-linux-v${{ steps.get_version.outputs.version }}.deb
            ```

            **macOS:**
            Double-click the .pkg file or mount .dmg and drag to Applications

            **Windows:**
            Extract ZIP and run .exe files

            ### 🔒 Security Status

            | Platform | Status | Production Ready |
            |----------|--------|------------------|
            | 🍎 macOS | ✅ Signed & Notarized | ✅ Yes |
            | 🐧 Linux | ✅ No signing needed | ✅ Yes |
            | 🪟 Windows | ❌ Unsigned | ⚠️ Testing only |

            ---
            **🍎 macOS users: Fully signed and notarized!**  
            **🐧 Linux users: Production ready!**  
            **🪟 Windows users: Signed packages coming soon!**
