name: Build macOS

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Application version'
      build-type:
        required: false
        type: string
        default: 'production'
        description: 'Build type (dev, staging, production)'
    outputs:
      artifact-name:
        description: "Name of the uploaded artifact"
        value: ${{ jobs.build-macos.outputs.artifact-name }}
    secrets:
      APPLE_CERTIFICATE_P12:
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        required: true
      APPLE_ID:
        required: true
      APPLE_ID_PASSWORD:
        required: true
      APPLE_TEAM_ID:
        required: true
  workflow_dispatch:
    inputs:
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options:
          - dev
          - staging
          - production
        default: 'dev'

jobs:
  build-macos:
    name: Build macOS Apps (Signed & Notarized)
    runs-on: macos-14
    timeout-minutes: 60
    outputs:
      artifact-name: ${{ steps.upload.outputs.artifact-name }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            r2midi_client/requirements.txt

      - name: Get application version
        id: version
        shell: bash
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(grep -o '__version__ = "[^"]*"' server/version.py | cut -d'"' -f2)
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "APP_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Validate build environment
        shell: bash
        run: |
          ./.github/scripts/validate-build-environment.sh macos

      - name: Install system dependencies
        run: |
          # Install required tools for signing and notarization
          brew install create-dmg

      - name: Install Python dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          python -m pip install briefcase
          python -m pip install -r requirements.txt
          if [ -f r2midi_client/requirements.txt ]; then 
            pip install -r r2midi_client/requirements.txt
          fi

      - name: Setup Apple Developer certificates
        uses: GuillaumeFalourd/sign-and-notarize-gha@v1
        with:
          certificate-p12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
          certificate-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
          apple-team-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Build applications
        shell: bash
        run: |
          ./.github/scripts/build-briefcase-apps.sh macos signed

      - name: Sign and notarize applications
        shell: bash
        run: |
          ./.github/scripts/sign-and-notarize-macos.sh \
            "${{ steps.version.outputs.version }}" \
            "${{ inputs.build-type }}" \
            "${{ secrets.APPLE_ID }}" \
            "${{ secrets.APPLE_ID_PASSWORD }}" \
            "${{ secrets.APPLE_TEAM_ID }}"

      - name: Create signed PKG installers
        uses: lando/notarize-action@v2
        with:
          product-path: "artifacts/R2MIDI-${{ steps.version.outputs.version }}.dmg"
          apple-id: ${{ secrets.APPLE_ID }}
          apple-id-password: ${{ secrets.APPLE_ID_PASSWORD }}
          team-id: ${{ secrets.APPLE_TEAM_ID }}

      - name: Package final artifacts
        shell: bash
        run: |
          ./.github/scripts/package-macos-apps.sh "${{ steps.version.outputs.version }}" "${{ inputs.build-type }}"

      - name: Upload artifacts
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ inputs.build-type }}-${{ github.run_number }}
          path: artifacts/
          retention-days: ${{ inputs.build-type == 'production' && 90 || 30 }}
          compression-level: 6

      - name: Build summary
        shell: bash
        run: |
          echo "## 🍎 macOS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ steps.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Build Type:** ${{ inputs.build-type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Signing:** Apple Developer ID (signed & notarized)" >> $GITHUB_STEP_SUMMARY
          echo "**Build Tool:** Briefcase" >> $GITHUB_STEP_SUMMARY
          echo "**Packaging:** DMG + PKG installers" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -d "artifacts" ]; then
            echo "### 📦 Created Packages:" >> $GITHUB_STEP_SUMMARY
            find artifacts -name "*.dmg" -o -name "*.pkg" | while read file; do
              if [ -f "$file" ]; then
                size=$(du -h "$file" | cut -f1)
                echo "- $(basename "$file") ($size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

      - name: Cleanup signing materials
        if: always()
        run: |
          # Clean up any temporary certificates/keys
          security delete-keychain signing.keychain 2>/dev/null || true