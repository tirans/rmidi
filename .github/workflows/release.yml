name: Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version-type:
        description: 'Version increment type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
          - none
      build-type:
        description: 'Build type'
        required: false
        type: choice
        options:
          - dev
          - staging
          - production
        default: 'production'

permissions:
  contents: write

jobs:
  # Version management
  version:
    name: Version Management
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.new_version }}
      changed: ${{ steps.version.outputs.changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version
        id: version
        shell: bash
        run: |
          ./.github/scripts/update-version.sh "${{ github.event.inputs.version-type || 'patch' }}"

  # Run tests
  test:
    name: Test Suite
    uses: ./.github/workflows/ci.yml
    needs: version

  # Build for all platforms
  build-windows:
    name: Build Windows
    needs: [version, test]
    uses: ./.github/workflows/build-windows.yml
    with:
      version: ${{ needs.version.outputs.version }}
      build-type: ${{ github.event.inputs.build-type || 'production' }}

  build-linux:
    name: Build Linux
    needs: [version, test]
    uses: ./.github/workflows/build-linux.yml
    with:
      version: ${{ needs.version.outputs.version }}
      build-type: ${{ github.event.inputs.build-type || 'production' }}

  build-macos:
    name: Build macOS
    needs: [version, test]
    uses: ./.github/workflows/build-macos.yml
    with:
      version: ${{ needs.version.outputs.version }}
      build-type: ${{ github.event.inputs.build-type || 'production' }}
    secrets:
      APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

  # Build Python package
  python-package:
    name: Build Python Package
    needs: [version, test]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.sha }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Build package
        shell: bash
        run: |
          ./.github/scripts/build-python-package.sh

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 30

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    needs: [version, python-package]
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      id-token: write  # Required for OIDC trusted publishing
    if: github.event.inputs.build-type == 'production' || github.ref == 'refs/heads/master'

    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          verbose: true

  # Create GitHub release
  create-release:
    name: Create Release
    needs: [version, build-windows, build-linux, build-macos, publish-pypi]
    runs-on: ubuntu-latest
    if: github.event.inputs.build-type == 'production' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.sha }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*-production-*"
          path: release_files
          merge-multiple: true

      - name: Prepare release assets
        shell: bash
        run: |
          ./.github/scripts/prepare-release-artifacts.sh "${{ needs.version.outputs.version }}"

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.version.outputs.version }}
          name: R2MIDI v${{ needs.version.outputs.version }}
          files: release_files/*
          token: ${{ secrets.GITHUB_TOKEN }}
          body: |
            ## üöÄ R2MIDI v${{ needs.version.outputs.version }}

            ### üì¶ Downloads

            #### üçé macOS (Signed & Notarized)
            - **DMG**: Drag & drop installer
            - **PKG**: Automated installer with signing verification

            #### ü™ü Windows (Unsigned)
            - **ZIP**: Portable application packages
            - **MSI**: Windows installer packages

            #### üêß Linux (Unsigned)
            - **DEB**: Debian/Ubuntu packages
            - **TAR.GZ**: Generic Linux archives
            - **AppImage**: Universal Linux applications

            ### üìã Installation

            See the [installation guide](https://github.com/tirans/r2midi/wiki/Installation) for detailed instructions.

            ### üîÑ Changes

            See [CHANGELOG.md](https://github.com/tirans/r2midi/blob/master/CHANGELOG.md) for details.

            ### üìä PyPI Package

            Available on PyPI: https://pypi.org/project/r2midi/

            ### ‚úÖ Build Information

            - **Windows**: Built with Briefcase (unsigned)
            - **Linux**: Built with Briefcase (unsigned) 
            - **macOS**: Built with Briefcase + Apple Developer ID signing & notarization
            - **Python Package**: Available on PyPI with OIDC trusted publishing